package compiler;
import java_cup.runtime.*;

terminal COMMA, BEGINTUP,ENDTUP,DOT, LBRACK, RBRACK, TIMES, PIPE, EQQ, ASSIGN, LPAREN, RPAREN, SEMI, COLON, IF, WHILE, ELSE, DO, REPEAT, UNTIL, RETURN, FDEF, TDEF, LCURL, RCURL, POW, VOID, NOT,MINUS,DIV;
terminal String ID, STRING, KEY, BOOLOP, NUMOP, SEQOP, COMPOP, TYPE, NUM, PLUS;
terminal Character CHAR;
terminal Boolean BOOL;
terminal Integer INT;
terminal Double FLOAT;

non terminal program, typeorid, dec,test, list, tuple, commalist, commalist2,literal, vdec, newdadec, csv, csv2, bodyr, body, statements, assign, expression, fcall, contflow, while, funcdec, if, repeat, return, stat2,  main, var;

precedence left  PLUS, MINUS;
precedence left BOOLOP;
precedence nonassoc EQQ;
precedence left  TIMES, DIV, COMPOP, SEQOP;
precedence right POW, NOT;


program ::= dec main {: System.out.println("Success AMIGO ! ");:};
main ::= body;
dec ::= dec vdec
|
dec funcdec
|
dec newdadec
|
;	
vdec ::= ID COLON typeorid SEMI
{: System.out.println("matched variable declaration no instantiation" );:}
| ID COLON typeorid ASSIGN commalist SEMI 
|
//can apply to new data types of normal variable declarations
error SEMI
{: System.out.println("bad variable or data type declaration");:}
;

funcdec ::= FDEF ID LPAREN csv RPAREN COLON typeorid bodyr
|
FDEF ID LPAREN csv RPAREN COLON VOID body

;

newdadec ::= TDEF typeorid COLON csv SEMI;

expression ::= 
NOT expression
|
LPAREN expression RPAREN
|
expression PLUS:p expression
|
expression EQQ expression				
|
expression TIMES expression
|
expression MINUS expression
|
expression DIV expression
|
expression POW expression
|
expression BOOLOP expression
|
SEQOP 
|				
expression SEQOP expression
|
expression COMPOP expression
|
NUM
|
ID LPAREN commalist RPAREN {://this is a fcall with no semi colon:}
|
var
|
ID LBRACK expression RBRACK
|
list
|
tuple
|
error
{:System.err.println("badly formed literal or expression" );:}
;
literal ::= expression
|
STRING
|
CHAR
|
BOOL
;


list ::=
LBRACK commalist RBRACK;
tuple ::= 
BEGINTUP commalist ENDTUP;
commalist ::=
|
literal commalist2
;
commalist2 ::=
|
COMMA commalist;
csv ::= | ID COLON typeorid csv2;
csv2 ::=
|
COMMA csv;

bodyr ::= LCURL dec statements return RCURL
;
body ::= LCURL dec statements RCURL
;

statements ::= |
stat2
;
stat2 ::= 
assign statements
|
fcall statements
|
contflow statements
;
assign ::= var ASSIGN literal SEMI;

fcall ::= ID LPAREN commalist RPAREN SEMI;
contflow ::= while
|
if
|
repeat
;
typeorid::=
ID
|
TYPE

;
while ::= WHILE LPAREN expression RPAREN DO body;
if ::= IF LPAREN expression RPAREN body ELSE body;
repeat ::= REPEAT body UNTIL LPAREN expression RPAREN SEMI;
return ::= RETURN expression SEMI
|
RETURN SEMI;

var ::= 
ID
|
ID DOT typeorid;
