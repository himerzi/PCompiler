
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 18 17:22:49 GMT 2012
//----------------------------------------------------

package compiler;

import java_cup.runtime.*;
import PSymbol.*;
import ast.*;
import ast.statements.*;
import ast.expressions.*;
import ast.declarations.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 18 17:22:49 GMT 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\004\004\000\002\004" +
    "\005\000\002\014\003\000\002\020\004\000\002\020\004" +
    "\000\002\020\004\000\002\020\002\000\002\015\006\000" +
    "\002\015\010\000\002\015\005\000\002\015\007\000\002" +
    "\015\006\000\002\015\011\000\002\016\012\000\002\016" +
    "\012\000\002\016\005\000\002\016\006\000\002\016\010" +
    "\000\002\016\011\000\002\017\007\000\002\017\005\000" +
    "\002\017\006\000\002\017\010\000\002\012\004\000\002" +
    "\012\002\000\002\011\003\000\002\011\003\000\002\010" +
    "\010\000\002\002\006\000\002\002\002\000\002\007\007" +
    "\000\002\007\002\000\002\035\006\000\002\037\004\000" +
    "\002\037\005\000\002\037\002\000\002\036\004\000\002" +
    "\043\004\000\002\043\004\000\002\043\004\000\002\043" +
    "\002\000\002\043\005\000\002\043\005\000\002\043\005" +
    "\000\002\044\006\000\002\044\006\000\002\044\006\000" +
    "\002\005\003\000\002\005\003\000\002\005\005\000\002" +
    "\005\005\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\045\006\000\002\033\004\000\002\032\003" +
    "\000\002\027\005\000\002\030\006\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\047\011\000\002" +
    "\047\005\000\002\047\007\000\002\047\011\000\002\050" +
    "\010\000\002\050\005\000\002\050\007\000\002\050\010" +
    "\000\002\051\011\000\002\051\006\000\002\051\007\000" +
    "\002\051\011\000\002\051\012\000\002\034\003\000\002" +
    "\034\003\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\004\000\002\034\005\000\002\013\003" +
    "\000\002\013\003\000\002\021\003\000\002\021\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\040\005\000\002\040\006\000\002\041\005\000\002\022" +
    "\003\000\002\022\003\000\002\023\003\000\002\023\003" +
    "\000\002\024\003\000\002\024\003\000\002\025\003\000" +
    "\002\003\004\000\002\003\002\000\002\042\005\000\002" +
    "\042\002\000\002\006\003\000\002\006\003\000\002\006" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\014\003\ufffa\025\ufffa\054\ufffa\055\ufffa\056" +
    "\ufffa\001\002\000\004\002\360\001\002\000\014\003\015" +
    "\025\012\054\017\055\011\056\014\001\002\000\014\003" +
    "\ufffb\025\ufffb\054\ufffb\055\ufffb\056\ufffb\001\002\000\014" +
    "\003\ufffc\025\ufffc\054\ufffc\055\ufffc\056\ufffc\001\002\000" +
    "\004\002\000\001\002\000\006\003\340\056\014\001\002" +
    "\000\016\026\uffe8\045\uffe8\047\uffe8\051\uffe8\053\uffe8\056" +
    "\uffe8\001\002\000\006\003\051\034\052\001\002\000\070" +
    "\003\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012" +
    "\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe" +
    "\021\ufffe\022\ufffe\023\ufffe\024\ufffe\027\ufffe\030\ufffe\031" +
    "\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe" +
    "\044\ufffe\001\002\000\010\025\022\026\024\035\025\001" +
    "\002\000\014\003\ufffd\025\ufffd\054\ufffd\055\ufffd\056\ufffd" +
    "\001\002\000\006\003\021\056\014\001\002\000\006\003" +
    "\026\034\027\001\002\000\010\025\022\026\024\035\025" +
    "\001\002\000\102\002\uff8b\003\uff8b\005\uff8b\006\uff8b\007" +
    "\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b" +
    "\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b\024" +
    "\uff8b\025\uff8b\026\uff8b\030\uff8b\032\uff8b\035\uff8b\036\uff8b" +
    "\044\uff8b\045\uff8b\047\uff8b\051\uff8b\053\uff8b\054\uff8b\055" +
    "\uff8b\056\uff8b\001\002\000\014\003\uffec\025\uffec\054\uffec" +
    "\055\uffec\056\uffec\001\002\000\102\002\uff8c\003\uff8c\005" +
    "\uff8c\006\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c" +
    "\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022" +
    "\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c\030\uff8c\032\uff8c" +
    "\035\uff8c\036\uff8c\044\uff8c\045\uff8c\047\uff8c\051\uff8c\053" +
    "\uff8c\054\uff8c\055\uff8c\056\uff8c\001\002\000\102\002\uff8a" +
    "\003\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a\012" +
    "\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a" +
    "\021\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a\030" +
    "\uff8a\032\uff8a\035\uff8a\036\uff8a\044\uff8a\045\uff8a\047\uff8a" +
    "\051\uff8a\053\uff8a\054\uff8a\055\uff8a\056\uff8a\001\002\000" +
    "\010\025\022\026\024\035\025\001\002\000\010\003\uffe3" +
    "\035\uffe3\056\014\001\002\000\006\003\044\035\045\001" +
    "\002\000\004\034\032\001\002\000\006\040\035\056\014" +
    "\001\002\000\012\003\uffe1\030\uffe1\035\uffe1\036\036\001" +
    "\002\000\014\003\uffa1\030\uffa1\033\uffa1\035\uffa1\036\uffa1" +
    "\001\002\000\014\003\uffa0\030\uffa0\033\uffa0\035\uffa0\036" +
    "\uffa0\001\002\000\004\056\014\001\002\000\010\003\uffe4" +
    "\030\uffe4\035\uffe4\001\002\000\004\034\041\001\002\000" +
    "\006\040\035\056\014\001\002\000\012\003\uffe1\030\uffe1" +
    "\035\uffe1\036\036\001\002\000\010\003\uffe2\030\uffe2\035" +
    "\uffe2\001\002\000\010\025\022\026\024\035\025\001\002" +
    "\000\014\003\uffed\025\uffed\054\uffed\055\uffed\056\uffed\001" +
    "\002\000\014\003\uffea\025\uffea\054\uffea\055\uffea\056\uffea" +
    "\001\002\000\014\003\uffeb\025\uffeb\054\uffeb\055\uffeb\056" +
    "\uffeb\001\002\000\004\002\uffff\001\002\000\010\025\022" +
    "\026\024\035\025\001\002\000\010\003\053\040\035\056" +
    "\014\001\002\000\010\025\022\026\024\035\025\001\002" +
    "\000\010\003\056\033\055\035\057\001\002\000\026\004" +
    "\066\027\073\031\104\042\103\043\071\056\014\057\105" +
    "\060\064\061\075\062\065\001\002\000\010\025\022\026" +
    "\024\035\025\001\002\000\026\003\ufff9\025\ufff9\026\ufff9" +
    "\045\ufff9\047\ufff9\051\ufff9\053\ufff9\054\ufff9\055\ufff9\056" +
    "\ufff9\001\002\000\026\003\ufff6\025\ufff6\026\ufff6\045\ufff6" +
    "\047\ufff6\051\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\001" +
    "\002\000\056\003\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e" +
    "\011\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017" +
    "\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\030\uff9e" +
    "\032\uff9e\035\uff9e\036\uff9e\044\uff9e\001\002\000\046\003" +
    "\204\005\131\006\126\007\130\010\124\011\142\012\137" +
    "\013\145\014\144\015\143\016\133\017\140\020\125\021" +
    "\141\022\134\023\132\024\136\035\203\001\002\000\064" +
    "\003\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012" +
    "\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\024\uffd1\027\116\030\uffd1\031" +
    "\115\032\uffd1\035\uffd1\036\uffd1\037\117\044\uffd1\001\002" +
    "\000\056\003\uff93\005\uff93\006\uff93\007\uff93\010\uff93\011" +
    "\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93\017\uff93" +
    "\020\uff93\021\uff93\022\uff93\023\uff93\024\uff93\030\uff93\032" +
    "\uff93\035\uff93\036\uff93\044\uff93\001\002\000\056\003\uff92" +
    "\005\uff92\006\uff92\007\uff92\010\uff92\011\uff92\012\uff92\013" +
    "\uff92\014\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92" +
    "\022\uff92\023\uff92\024\uff92\030\uff92\032\uff92\035\uff92\036" +
    "\uff92\044\uff92\001\002\000\026\004\066\027\073\031\104" +
    "\042\103\043\071\056\014\057\105\060\064\061\075\062" +
    "\065\001\002\000\056\003\uff95\005\uff95\006\uff95\007\uff95" +
    "\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016" +
    "\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95\024\uff95" +
    "\030\uff95\032\uff95\035\uff95\036\uff95\044\uff95\001\002\000" +
    "\060\003\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc" +
    "\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020" +
    "\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\030\uffcc\032\uffcc" +
    "\035\uffcc\036\uffcc\037\uffcc\044\uffcc\001\002\000\030\004" +
    "\066\027\073\031\104\042\103\043\071\044\uff8f\056\014" +
    "\057\105\060\064\061\075\062\065\001\002\000\060\003" +
    "\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8" +
    "\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021" +
    "\uffc8\022\uffc8\023\uffc8\024\uffc8\030\uffc8\032\uffc8\035\uffc8" +
    "\036\uffc8\037\uffc8\044\uffc8\001\002\000\026\004\066\027" +
    "\073\031\104\042\103\043\071\056\014\057\105\060\064" +
    "\061\075\062\065\001\002\000\056\003\uff94\005\uff94\006" +
    "\uff94\007\uff94\010\uff94\011\uff94\012\uff94\013\uff94\014\uff94" +
    "\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94\022\uff94\023" +
    "\uff94\024\uff94\030\uff94\032\uff94\035\uff94\036\uff94\044\uff94" +
    "\001\002\000\056\003\uff91\005\uff91\006\uff91\007\uff91\010" +
    "\uff91\011\uff91\012\uff91\013\uff91\014\uff91\015\uff91\016\uff91" +
    "\017\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024\uff91\030" +
    "\uff91\032\uff91\035\uff91\036\uff91\044\uff91\001\002\000\056" +
    "\003\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012" +
    "\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b" +
    "\021\uff9b\022\uff9b\023\uff9b\024\uff9b\030\uff9b\032\uff9b\035" +
    "\uff9b\036\uff9b\044\uff9b\001\002\000\056\003\uff9f\005\uff9f" +
    "\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014" +
    "\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f" +
    "\023\uff9f\024\uff9f\030\uff9f\032\uff9f\035\uff9f\036\uff9f\044" +
    "\uff9f\001\002\000\056\003\uff97\005\uff97\006\uff97\007\uff97" +
    "\010\uff97\011\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016" +
    "\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023\uff97\024\uff97" +
    "\030\uff97\032\uff97\035\uff97\036\uff97\044\uff97\001\002\000" +
    "\060\003\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd" +
    "\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\030\uffcd\032\uffcd" +
    "\035\uffcd\036\uffcd\037\uffcd\044\uffcd\001\002\000\056\003" +
    "\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5" +
    "\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021" +
    "\uffb5\022\uffb5\023\uffb5\024\uffb5\030\uffb5\032\uffb5\035\uffb5" +
    "\036\uffb5\044\uffb5\001\002\000\056\003\uff9d\005\uff9d\006" +
    "\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d" +
    "\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023" +
    "\uff9d\024\uff9d\030\uff9d\032\uff9d\035\uff9d\036\uff9d\044\uff9d" +
    "\001\002\000\032\003\uff8f\004\066\027\073\031\104\032" +
    "\uff8f\042\103\043\071\056\014\057\105\060\064\061\075" +
    "\062\065\001\002\000\056\003\uff96\005\uff96\006\uff96\007" +
    "\uff96\010\uff96\011\uff96\012\uff96\013\uff96\014\uff96\015\uff96" +
    "\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024" +
    "\uff96\030\uff96\032\uff96\035\uff96\036\uff96\044\uff96\001\002" +
    "\000\056\003\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011" +
    "\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c" +
    "\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\030\uff9c\032" +
    "\uff9c\035\uff9c\036\uff9c\044\uff9c\001\002\000\060\003\uffd0" +
    "\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\024\uffd0\030\uffd0\032\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\044\uffd0\001\002\000\060\003\uffb4\005\uffb4" +
    "\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014" +
    "\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4" +
    "\023\uffb4\024\uffb4\030\uffb4\032\uffb4\035\uffb4\036\uffb4\037" +
    "\112\044\uffb4\001\002\000\060\003\uffcb\005\uffcb\006\uffcb" +
    "\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015" +
    "\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb" +
    "\024\uffcb\030\uffcb\032\uffcb\035\uffcb\036\uffcb\037\uffcb\044" +
    "\uffcb\001\002\000\004\056\014\001\002\000\064\003\uffcf" +
    "\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\023\uffcf\024\uffcf\027\116\030\uffcf\031\115\032" +
    "\uffcf\035\uffcf\036\uffcf\037\uffcf\044\uffcf\001\002\000\060" +
    "\003\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012" +
    "\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce" +
    "\021\uffce\022\uffce\023\uffce\024\uffce\030\uffce\032\uffce\035" +
    "\uffce\036\uffce\037\uffce\044\uffce\001\002\000\026\004\066" +
    "\027\073\031\104\042\103\043\071\056\014\057\105\060" +
    "\064\061\075\062\065\001\002\000\030\004\066\027\073" +
    "\030\uff8f\031\104\042\103\043\071\056\014\057\105\060" +
    "\064\061\075\062\065\001\002\000\004\056\014\001\002" +
    "\000\062\003\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011" +
    "\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\030\uffc7\032" +
    "\uffc7\033\uffc7\035\uffc7\036\uffc7\037\uffc7\044\uffc7\001\002" +
    "\000\056\003\uff8d\005\131\006\126\007\130\010\124\011" +
    "\142\012\137\013\145\014\144\015\143\016\133\017\140" +
    "\020\125\021\141\022\134\023\132\024\136\030\uff8d\032" +
    "\uff8d\035\uff8d\036\135\044\uff8d\001\002\000\004\030\123" +
    "\001\002\000\060\003\uffca\005\uffca\006\uffca\007\uffca\010" +
    "\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca" +
    "\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\030" +
    "\uffca\032\uffca\035\uffca\036\uffca\037\uffca\044\uffca\001\002" +
    "\000\026\004\066\027\073\031\104\042\103\043\071\056" +
    "\014\057\105\060\064\061\075\062\065\001\002\000\026" +
    "\004\066\027\073\031\104\042\103\043\071\056\014\057" +
    "\105\060\064\061\075\062\065\001\002\000\026\004\066" +
    "\027\073\031\104\042\103\043\071\056\014\057\105\060" +
    "\064\061\075\062\065\001\002\000\014\003\uff90\030\uff90" +
    "\032\uff90\035\uff90\044\uff90\001\002\000\026\004\066\027" +
    "\073\031\104\042\103\043\071\056\014\057\105\060\064" +
    "\061\075\062\065\001\002\000\026\004\066\027\073\031" +
    "\104\042\103\043\071\056\014\057\105\060\064\061\075" +
    "\062\065\001\002\000\026\004\066\027\073\031\104\042" +
    "\103\043\071\056\014\057\105\060\064\061\075\062\065" +
    "\001\002\000\026\004\066\027\073\031\104\042\103\043" +
    "\071\056\014\057\105\060\064\061\075\062\065\001\002" +
    "\000\026\004\066\027\073\031\104\042\103\043\071\056" +
    "\014\057\105\060\064\061\075\062\065\001\002\000\026" +
    "\004\066\027\073\031\104\042\103\043\071\056\014\057" +
    "\105\060\064\061\075\062\065\001\002\000\026\004\066" +
    "\027\073\031\104\042\103\043\071\056\014\057\105\060" +
    "\064\061\075\062\065\001\002\000\026\004\066\027\073" +
    "\031\104\042\103\043\071\056\014\057\105\060\064\061" +
    "\075\062\065\001\002\000\026\004\066\027\073\031\104" +
    "\042\103\043\071\056\014\057\105\060\064\061\075\062" +
    "\065\001\002\000\026\004\066\027\073\031\104\042\103" +
    "\043\071\056\014\057\105\060\064\061\075\062\065\001" +
    "\002\000\026\004\066\027\073\031\104\042\103\043\071" +
    "\056\014\057\105\060\064\061\075\062\065\001\002\000" +
    "\026\004\066\027\073\031\104\042\103\043\071\056\014" +
    "\057\105\060\064\061\075\062\065\001\002\000\026\004" +
    "\066\027\073\031\104\042\103\043\071\056\014\057\105" +
    "\060\064\061\075\062\065\001\002\000\026\004\066\027" +
    "\073\031\104\042\103\043\071\056\014\057\105\060\064" +
    "\061\075\062\065\001\002\000\056\003\uffaf\005\uffaf\006" +
    "\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\145\014\uffaf" +
    "\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023" +
    "\uffaf\024\uffaf\030\uffaf\032\uffaf\035\uffaf\036\uffaf\044\uffaf" +
    "\001\002\000\042\003\uffaa\005\uffaa\006\uffaa\007\130\010" +
    "\124\011\142\012\137\013\145\022\uffaa\023\uffaa\024\uffaa" +
    "\030\uffaa\032\uffaa\035\uffaa\036\uffaa\044\uffaa\001\002\000" +
    "\042\003\uffa9\005\uffa9\006\uffa9\007\130\010\124\011\142" +
    "\012\137\013\145\022\uffa9\023\uffa9\024\uffa9\030\uffa9\032" +
    "\uffa9\035\uffa9\036\uffa9\044\uffa9\001\002\000\056\003\uffb2" +
    "\005\uffb2\006\uffb2\007\uffb2\010\124\011\uffb2\012\137\013" +
    "\145\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2" +
    "\022\uffb2\023\uffb2\024\uffb2\030\uffb2\032\uffb2\035\uffb2\036" +
    "\uffb2\044\uffb2\001\002\000\042\003\uffad\005\uffad\006\uffad" +
    "\007\130\010\124\011\142\012\137\013\145\022\uffad\023" +
    "\uffad\024\uffad\030\uffad\032\uffad\035\uffad\036\uffad\044\uffad" +
    "\001\002\000\042\003\uffa7\005\uffa7\006\uffa7\007\130\010" +
    "\124\011\142\012\137\013\145\022\uffa7\023\uffa7\024\uffa7" +
    "\030\uffa7\032\uffa7\035\uffa7\036\uffa7\044\uffa7\001\002\000" +
    "\056\003\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0" +
    "\012\uffb0\013\145\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020" +
    "\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\030\uffb0\032\uffb0" +
    "\035\uffb0\036\uffb0\044\uffb0\001\002\000\056\003\uffa5\005" +
    "\131\006\126\007\130\010\124\011\142\012\137\013\145" +
    "\014\144\015\143\016\133\017\140\020\125\021\141\022" +
    "\uffa5\023\uffa5\024\uffa5\030\uffa5\032\uffa5\035\uffa5\036\uffa5" +
    "\044\uffa5\001\002\000\056\003\uff8d\005\131\006\126\007" +
    "\130\010\124\011\142\012\137\013\145\014\144\015\143" +
    "\016\133\017\140\020\125\021\141\022\134\023\132\024" +
    "\136\030\uff8d\032\uff8d\035\uff8d\036\135\044\uff8d\001\002" +
    "\000\014\003\uff8e\030\uff8e\032\uff8e\035\uff8e\044\uff8e\001" +
    "\002\000\056\003\uffa4\005\131\006\126\007\130\010\124" +
    "\011\142\012\137\013\145\014\144\015\143\016\133\017" +
    "\140\020\125\021\141\022\uffa4\023\uffa4\024\uffa4\030\uffa4" +
    "\032\uffa4\035\uffa4\036\uffa4\044\uffa4\001\002\000\042\003" +
    "\uffa8\005\uffa8\006\uffa8\007\130\010\124\011\142\012\137" +
    "\013\145\022\uffa8\023\uffa8\024\uffa8\030\uffa8\032\uffa8\035" +
    "\uffa8\036\uffa8\044\uffa8\001\002\000\056\003\uffa6\005\131" +
    "\006\126\007\130\010\124\011\142\012\137\013\145\014" +
    "\144\015\143\016\133\017\140\020\125\021\141\022\uffa6" +
    "\023\uffa6\024\uffa6\030\uffa6\032\uffa6\035\uffa6\036\uffa6\044" +
    "\uffa6\001\002\000\056\003\uffab\005\uffab\006\126\007\130" +
    "\010\124\011\142\012\137\013\145\014\144\015\143\016" +
    "\133\017\140\020\125\021\141\022\uffab\023\uffab\024\uffab" +
    "\030\uffab\032\uffab\035\uffab\036\uffab\044\uffab\001\002\000" +
    "\056\003\uffb3\005\uffb3\006\uffb3\007\uffb3\010\124\011\uffb3" +
    "\012\137\013\145\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020" +
    "\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\030\uffb3\032\uffb3" +
    "\035\uffb3\036\uffb3\044\uffb3\001\002\000\056\003\uffac\005" +
    "\uffac\006\uffac\007\130\010\124\011\142\012\137\013\145" +
    "\014\144\015\143\016\133\017\140\020\125\021\141\022" +
    "\uffac\023\uffac\024\uffac\030\uffac\032\uffac\035\uffac\036\uffac" +
    "\044\uffac\001\002\000\042\003\uffae\005\uffae\006\uffae\007" +
    "\130\010\124\011\142\012\137\013\145\022\uffae\023\uffae" +
    "\024\uffae\030\uffae\032\uffae\035\uffae\036\uffae\044\uffae\001" +
    "\002\000\056\003\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1" +
    "\011\uffb1\012\uffb1\013\145\014\uffb1\015\uffb1\016\uffb1\017" +
    "\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\030\uffb1" +
    "\032\uffb1\035\uffb1\036\uffb1\044\uffb1\001\002\000\044\005" +
    "\131\006\126\007\130\010\124\011\142\012\137\013\145" +
    "\014\144\015\143\016\133\017\140\020\125\021\141\022" +
    "\134\023\132\024\136\032\171\001\002\000\062\003\uffc6" +
    "\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013" +
    "\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\024\uffc6\030\uffc6\032\uffc6\033\uffc6\035" +
    "\uffc6\036\uffc6\037\uffc6\044\uffc6\001\002\000\006\003\173" +
    "\032\174\001\002\000\010\025\022\026\024\035\025\001" +
    "\002\000\056\003\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a" +
    "\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017" +
    "\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\030\uff9a" +
    "\032\uff9a\035\uff9a\036\uff9a\044\uff9a\001\002\000\056\003" +
    "\uff99\005\uff99\006\uff99\007\uff99\010\uff99\011\uff99\012\uff99" +
    "\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99\020\uff99\021" +
    "\uff99\022\uff99\023\uff99\024\uff99\030\uff99\032\uff99\035\uff99" +
    "\036\uff99\044\uff99\001\002\000\044\005\131\006\126\007" +
    "\130\010\124\011\142\012\137\013\145\014\144\015\143" +
    "\016\133\017\140\020\125\021\141\022\134\023\132\024" +
    "\136\030\177\001\002\000\056\003\uffa2\005\uffa2\006\uffa2" +
    "\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015" +
    "\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2" +
    "\024\uffa2\030\uffa2\032\uffa2\035\uffa2\036\uffa2\044\uffa2\001" +
    "\002\000\004\044\201\001\002\000\056\003\uff98\005\uff98" +
    "\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98\013\uff98\014" +
    "\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98" +
    "\023\uff98\024\uff98\030\uff98\032\uff98\035\uff98\036\uff98\044" +
    "\uff98\001\002\000\056\003\uffa3\005\uffa3\006\uffa3\007\uffa3" +
    "\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016" +
    "\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3" +
    "\030\uffa3\032\uffa3\035\uffa3\036\uffa3\044\uffa3\001\002\000" +
    "\026\003\ufff8\025\ufff8\026\ufff8\045\ufff8\047\ufff8\051\ufff8" +
    "\053\ufff8\054\ufff8\055\ufff8\056\ufff8\001\002\000\010\025" +
    "\022\026\024\035\025\001\002\000\026\003\ufff4\025\ufff4" +
    "\026\ufff4\045\ufff4\047\ufff4\051\ufff4\053\ufff4\054\ufff4\055" +
    "\ufff4\056\ufff4\001\002\000\026\003\ufff5\025\ufff5\026\ufff5" +
    "\045\ufff5\047\ufff5\051\ufff5\053\ufff5\054\ufff5\055\ufff5\056" +
    "\ufff5\001\002\000\026\003\ufff7\025\ufff7\026\ufff7\045\ufff7" +
    "\047\ufff7\051\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\001" +
    "\002\000\006\026\uffdd\053\331\001\002\000\016\026\uffd8" +
    "\045\221\047\214\051\231\053\uffd8\056\014\001\002\000" +
    "\006\026\uffdc\053\uffdc\001\002\000\016\003\051\027\116" +
    "\031\115\033\260\034\324\037\117\001\002\000\006\003" +
    "\311\027\312\001\002\000\004\033\306\001\002\000\016" +
    "\026\uffe6\045\uffe6\047\uffe6\051\uffe6\053\uffe6\056\uffe6\001" +
    "\002\000\004\035\305\001\002\000\020\003\303\026\uffd8" +
    "\045\221\047\214\051\231\053\uffd8\056\014\001\002\000" +
    "\006\003\266\027\267\001\002\000\020\003\uffc3\026\uffc3" +
    "\045\uffc3\047\uffc3\051\uffc3\053\uffc3\056\uffc3\001\002\000" +
    "\020\003\uffc5\026\uffc5\045\uffc5\047\uffc5\051\uffc5\053\uffc5" +
    "\056\uffc5\001\002\000\020\003\uffc4\026\uffc4\045\uffc4\047" +
    "\uffc4\051\uffc4\053\uffc4\056\uffc4\001\002\000\016\026\uffe9" +
    "\045\uffe9\047\uffe9\051\uffe9\053\uffe9\056\uffe9\001\002\000" +
    "\016\026\uffe7\045\uffe7\047\uffe7\051\uffe7\053\uffe7\056\uffe7" +
    "\001\002\000\020\003\263\026\uffd8\045\221\047\214\051" +
    "\231\053\uffd8\056\014\001\002\000\020\003\255\026\uffd8" +
    "\045\221\047\214\051\231\053\uffd8\056\014\001\002\000" +
    "\004\025\012\001\002\000\004\033\233\001\002\000\026" +
    "\004\066\027\073\031\104\042\103\043\071\056\014\057" +
    "\105\060\064\061\075\062\065\001\002\000\044\005\131" +
    "\006\126\007\130\010\124\011\142\012\137\013\145\014" +
    "\144\015\143\016\133\017\140\020\125\021\141\022\134" +
    "\023\132\024\136\035\235\001\002\000\020\003\uffd3\026" +
    "\uffd3\045\uffd3\047\uffd3\051\uffd3\053\uffd3\056\uffd3\001\002" +
    "\000\006\003\237\052\240\001\002\000\010\025\022\026" +
    "\024\035\025\001\002\000\006\003\241\027\242\001\002" +
    "\000\010\025\022\026\024\035\025\001\002\000\026\004" +
    "\066\027\073\031\104\042\103\043\071\056\014\057\105" +
    "\060\064\061\075\062\065\001\002\000\046\003\245\005" +
    "\131\006\126\007\130\010\124\011\142\012\137\013\145" +
    "\014\144\015\143\016\133\017\140\020\125\021\141\022" +
    "\134\023\132\024\136\030\244\001\002\000\006\003\247" +
    "\035\250\001\002\000\010\025\022\026\024\035\025\001" +
    "\002\000\020\003\uffb7\026\uffb7\045\uffb7\047\uffb7\051\uffb7" +
    "\053\uffb7\056\uffb7\001\002\000\010\025\022\026\024\035" +
    "\025\001\002\000\020\003\uffba\026\uffba\045\uffba\047\uffba" +
    "\051\uffba\053\uffba\056\uffba\001\002\000\020\003\uffb6\026" +
    "\uffb6\045\uffb6\047\uffb6\051\uffb6\053\uffb6\056\uffb6\001\002" +
    "\000\020\003\uffb8\026\uffb8\045\uffb8\047\uffb8\051\uffb8\053" +
    "\uffb8\056\uffb8\001\002\000\020\003\uffb9\026\uffb9\045\uffb9" +
    "\047\uffb9\051\uffb9\053\uffb9\056\uffb9\001\002\000\012\027" +
    "\116\031\115\033\260\037\117\001\002\000\010\025\022" +
    "\026\024\035\025\001\002\000\006\026\uffd9\053\uffd9\001" +
    "\002\000\006\026\uffd5\053\uffd5\001\002\000\026\004\066" +
    "\027\073\031\104\042\103\043\071\056\014\057\105\060" +
    "\064\061\075\062\065\001\002\000\044\005\131\006\126" +
    "\007\130\010\124\011\142\012\137\013\145\014\144\015" +
    "\143\016\133\017\140\020\125\021\141\022\134\023\132" +
    "\024\136\035\262\001\002\000\020\003\uffd4\026\uffd4\045" +
    "\uffd4\047\uffd4\051\uffd4\053\uffd4\056\uffd4\001\002\000\010" +
    "\025\022\026\024\035\025\001\002\000\006\026\uffdb\053" +
    "\uffdb\001\002\000\006\026\uffd7\053\uffd7\001\002\000\010" +
    "\025\022\026\024\035\025\001\002\000\026\004\066\027" +
    "\073\031\104\042\103\043\071\056\014\057\105\060\064" +
    "\061\075\062\065\001\002\000\046\003\272\005\131\006" +
    "\126\007\130\010\124\011\142\012\137\013\145\014\144" +
    "\015\143\016\133\017\140\020\125\021\141\022\134\023" +
    "\132\024\136\030\271\001\002\000\004\025\012\001\002" +
    "\000\010\025\022\026\024\035\025\001\002\000\020\003" +
    "\uffc0\026\uffc0\045\uffc0\047\uffc0\051\uffc0\053\uffc0\056\uffc0" +
    "\001\002\000\006\003\276\046\275\001\002\000\004\025" +
    "\012\001\002\000\010\025\022\026\024\035\025\001\002" +
    "\000\020\003\uffbf\026\uffbf\045\uffbf\047\uffbf\051\uffbf\053" +
    "\uffbf\056\uffbf\001\002\000\020\003\uffc2\026\uffc2\045\uffc2" +
    "\047\uffc2\051\uffc2\053\uffc2\056\uffc2\001\002\000\020\003" +
    "\uffc1\026\uffc1\045\uffc1\047\uffc1\051\uffc1\053\uffc1\056\uffc1" +
    "\001\002\000\006\026\uffda\053\uffda\001\002\000\010\025" +
    "\022\026\024\035\025\001\002\000\006\026\uffd6\053\uffd6" +
    "\001\002\000\020\003\uffc9\026\uffc9\045\uffc9\047\uffc9\051" +
    "\uffc9\053\uffc9\056\uffc9\001\002\000\026\004\066\027\073" +
    "\031\104\042\103\043\071\056\014\057\105\060\064\061" +
    "\075\062\065\001\002\000\044\005\131\006\126\007\130" +
    "\010\124\011\142\012\137\013\145\014\144\015\143\016" +
    "\133\017\140\020\125\021\141\022\134\023\132\024\136" +
    "\035\310\001\002\000\020\003\uffd2\026\uffd2\045\uffd2\047" +
    "\uffd2\051\uffd2\053\uffd2\056\uffd2\001\002\000\010\025\022" +
    "\026\024\035\025\001\002\000\026\004\066\027\073\031" +
    "\104\042\103\043\071\056\014\057\105\060\064\061\075" +
    "\062\065\001\002\000\046\003\315\005\131\006\126\007" +
    "\130\010\124\011\142\012\137\013\145\014\144\015\143" +
    "\016\133\017\140\020\125\021\141\022\134\023\132\024" +
    "\136\030\314\001\002\000\006\003\320\050\317\001\002" +
    "\000\010\025\022\026\024\035\025\001\002\000\020\003" +
    "\uffbc\026\uffbc\045\uffbc\047\uffbc\051\uffbc\053\uffbc\056\uffbc" +
    "\001\002\000\004\025\012\001\002\000\010\025\022\026" +
    "\024\035\025\001\002\000\020\003\uffbb\026\uffbb\045\uffbb" +
    "\047\uffbb\051\uffbb\053\uffbb\056\uffbb\001\002\000\020\003" +
    "\uffbe\026\uffbe\045\uffbe\047\uffbe\051\uffbe\053\uffbe\056\uffbe" +
    "\001\002\000\020\003\uffbd\026\uffbd\045\uffbd\047\uffbd\051" +
    "\uffbd\053\uffbd\056\uffbd\001\002\000\010\003\053\040\035" +
    "\056\014\001\002\000\010\003\uffa1\033\326\035\uffa1\001" +
    "\002\000\030\004\066\027\073\031\104\035\uff8f\042\103" +
    "\043\071\056\014\057\105\060\064\061\075\062\065\001" +
    "\002\000\004\035\330\001\002\000\016\026\uffe5\045\uffe5" +
    "\047\uffe5\051\uffe5\053\uffe5\056\uffe5\001\002\000\030\004" +
    "\066\027\073\031\104\035\335\042\103\043\071\056\014" +
    "\057\105\060\064\061\075\062\065\001\002\000\004\026" +
    "\333\001\002\000\034\002\uffe0\003\uffe0\025\uffe0\026\uffe0" +
    "\045\uffe0\046\uffe0\047\uffe0\051\uffe0\052\uffe0\053\uffe0\054" +
    "\uffe0\055\uffe0\056\uffe0\001\002\000\044\005\131\006\126" +
    "\007\130\010\124\011\142\012\137\013\145\014\144\015" +
    "\143\016\133\017\140\020\125\021\141\022\134\023\132" +
    "\024\136\035\336\001\002\000\004\026\uffdf\001\002\000" +
    "\004\026\uffde\001\002\000\006\003\342\027\343\001\002" +
    "\000\010\025\022\026\024\035\025\001\002\000\014\003" +
    "\ufff1\025\ufff1\054\ufff1\055\ufff1\056\ufff1\001\002\000\010" +
    "\025\022\026\024\035\025\001\002\000\010\003\uffe3\030" +
    "\uffe3\056\014\001\002\000\006\003\346\030\345\001\002" +
    "\000\006\003\350\034\351\001\002\000\010\025\022\026" +
    "\024\035\025\001\002\000\014\003\uffef\025\uffef\054\uffef" +
    "\055\uffef\056\uffef\001\002\000\010\025\022\026\024\035" +
    "\025\001\002\000\006\040\353\041\352\001\002\000\004" +
    "\025\012\001\002\000\004\025\012\001\002\000\014\003" +
    "\ufff3\025\ufff3\054\ufff3\055\ufff3\056\ufff3\001\002\000\014" +
    "\003\ufff2\025\ufff2\054\ufff2\055\ufff2\056\ufff2\001\002\000" +
    "\014\003\uffee\025\uffee\054\uffee\055\uffee\056\uffee\001\002" +
    "\000\014\003\ufff0\025\ufff0\054\ufff0\055\ufff0\056\ufff0\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\006\004\003\020\004\001\001\000\002\001" +
    "\001\000\014\014\012\015\015\016\006\017\005\035\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\336\001\001\000\006\012\210\036\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\047\001\001\000\002\001\001\000\004\014\017\001\001" +
    "\000\002\001\001\000\004\006\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\046\001\001\000\006\002\027\014\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\032" +
    "\014\033\001\001\000\004\007\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\041\014\033\001" +
    "\001\000\004\007\042\001\001\000\002\001\001\000\004" +
    "\006\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\206\001\001" +
    "\000\006\013\053\014\033\001\001\000\004\006\205\001" +
    "\001\000\002\001\001\000\042\005\107\014\062\021\101" +
    "\022\076\023\077\024\066\025\073\026\060\027\067\030" +
    "\110\031\106\032\100\034\061\040\105\041\075\045\071" +
    "\001\001\000\004\006\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\005" +
    "\107\014\062\021\101\022\076\023\077\024\066\025\073" +
    "\026\060\027\067\030\110\031\106\032\100\034\201\040" +
    "\105\041\075\045\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\003\177\005\107\014\062\021\101\022" +
    "\076\023\077\024\066\025\073\026\060\027\067\030\110" +
    "\031\106\032\100\034\120\040\105\041\075\045\071\001" +
    "\001\000\002\001\001\000\042\005\107\014\062\021\101" +
    "\022\076\023\077\024\066\025\073\026\060\027\067\030" +
    "\110\031\106\032\100\034\175\040\105\041\075\045\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\003\171\005" +
    "\107\014\062\021\101\022\076\023\077\024\066\025\073" +
    "\026\060\027\067\030\110\031\106\032\100\034\120\040" +
    "\105\041\075\045\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\014\112\027\067\030\110\031\113\032\100" +
    "\045\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\005\107\014\062\021\101\022\076\023\077\024\066" +
    "\025\073\026\060\027\067\030\110\031\106\032\100\034" +
    "\167\040\105\041\075\045\071\001\001\000\044\003\121" +
    "\005\107\014\062\021\101\022\076\023\077\024\066\025" +
    "\073\026\060\027\067\030\110\031\106\032\100\034\120" +
    "\040\105\041\075\045\071\001\001\000\004\014\117\001" +
    "\001\000\002\001\001\000\004\042\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\005\107\014\062\021" +
    "\101\022\076\023\077\024\066\025\073\026\060\027\067" +
    "\030\110\031\106\032\100\034\166\040\105\041\075\045" +
    "\071\001\001\000\042\005\107\014\062\021\101\022\076" +
    "\023\077\024\066\025\073\026\060\027\067\030\110\031" +
    "\106\032\100\034\165\040\105\041\075\045\071\001\001" +
    "\000\042\005\107\014\062\021\101\022\076\023\077\024" +
    "\066\025\073\026\060\027\067\030\110\031\106\032\100" +
    "\034\164\040\105\041\075\045\071\001\001\000\002\001" +
    "\001\000\042\005\107\014\062\021\101\022\076\023\077" +
    "\024\066\025\073\026\060\027\067\030\110\031\106\032" +
    "\100\034\163\040\105\041\075\045\071\001\001\000\042" +
    "\005\107\014\062\021\101\022\076\023\077\024\066\025" +
    "\073\026\060\027\067\030\110\031\106\032\100\034\162" +
    "\040\105\041\075\045\071\001\001\000\042\005\107\014" +
    "\062\021\101\022\076\023\077\024\066\025\073\026\060" +
    "\027\067\030\110\031\106\032\100\034\161\040\105\041" +
    "\075\045\071\001\001\000\042\005\107\014\062\021\101" +
    "\022\076\023\077\024\066\025\073\026\060\027\067\030" +
    "\110\031\106\032\100\034\160\040\105\041\075\045\071" +
    "\001\001\000\042\005\107\014\062\021\101\022\076\023" +
    "\077\024\066\025\073\026\060\027\067\030\110\031\106" +
    "\032\100\034\157\040\105\041\075\045\071\001\001\000" +
    "\042\005\107\014\062\021\101\022\076\023\077\024\066" +
    "\025\073\026\060\027\067\030\110\031\106\032\100\034" +
    "\155\040\105\041\075\045\071\001\001\000\042\005\107" +
    "\014\062\021\101\022\076\023\077\024\066\025\073\026" +
    "\060\027\067\030\110\031\106\032\100\034\154\040\105" +
    "\041\075\045\071\001\001\000\042\005\107\014\062\021" +
    "\101\022\076\023\077\024\066\025\073\026\060\027\067" +
    "\030\110\031\106\032\100\034\153\040\105\041\075\045" +
    "\071\001\001\000\042\005\107\014\062\021\101\022\076" +
    "\023\077\024\066\025\073\026\060\027\067\030\110\031" +
    "\106\032\100\034\152\040\105\041\075\045\071\001\001" +
    "\000\042\005\107\014\062\021\101\022\076\023\077\024" +
    "\066\025\073\026\060\027\067\030\110\031\106\032\100" +
    "\034\151\040\105\041\075\045\071\001\001\000\042\005" +
    "\107\014\062\021\101\022\076\023\077\024\066\025\073" +
    "\026\060\027\067\030\110\031\106\032\100\034\150\040" +
    "\105\041\075\045\071\001\001\000\042\005\107\014\062" +
    "\021\101\022\076\023\077\024\066\025\073\026\060\027" +
    "\067\030\110\031\106\032\100\034\147\040\105\041\075" +
    "\045\071\001\001\000\042\005\107\014\062\021\101\022" +
    "\076\023\077\024\066\025\073\026\060\027\067\030\110" +
    "\031\106\032\100\034\146\040\105\041\075\045\071\001" +
    "\001\000\042\005\107\014\062\021\101\022\076\023\077" +
    "\024\066\025\073\026\060\027\067\030\110\031\106\032" +
    "\100\034\145\040\105\041\075\045\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\331\001\001\000\036\010\215\011\224\014\212\015\225" +
    "\027\214\030\231\033\217\043\211\044\226\045\216\046" +
    "\227\047\222\050\223\051\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\014\253\027\214" +
    "\030\231\033\217\043\301\044\226\045\216\046\227\047" +
    "\222\050\223\051\221\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\014\253\027\214\030\231" +
    "\033\217\043\263\044\226\045\216\046\227\047\222\050" +
    "\223\051\221\001\001\000\030\014\253\027\214\030\231" +
    "\033\217\043\255\044\226\045\216\046\227\047\222\050" +
    "\223\051\221\001\001\000\004\035\235\001\001\000\002" +
    "\001\001\000\042\005\107\014\062\021\101\022\076\023" +
    "\077\024\066\025\073\026\060\027\067\030\110\031\106" +
    "\032\100\034\233\040\105\041\075\045\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\252\001\001\000\002\001\001\000\004\006\251\001" +
    "\001\000\042\005\107\014\062\021\101\022\076\023\077" +
    "\024\066\025\073\026\060\027\067\030\110\031\106\032" +
    "\100\034\242\040\105\041\075\045\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\245\001\001\000" +
    "\002\001\001\000\004\006\250\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\005\107\014\062\021\101\022" +
    "\076\023\077\024\066\025\073\026\060\027\067\030\110" +
    "\031\106\032\100\034\260\040\105\041\075\045\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\264" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\300\001\001\000\042\005\107\014\062\021\101\022\076" +
    "\023\077\024\066\025\073\026\060\027\067\030\110\031" +
    "\106\032\100\034\267\040\105\041\075\045\071\001\001" +
    "\000\002\001\001\000\004\035\273\001\001\000\004\006" +
    "\272\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\277\001\001\000\004\006\276\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\303\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\005\107\014\062\021\101\022\076\023\077" +
    "\024\066\025\073\026\060\027\067\030\110\031\106\032" +
    "\100\034\306\040\105\041\075\045\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\322\001\001\000" +
    "\042\005\107\014\062\021\101\022\076\023\077\024\066" +
    "\025\073\026\060\027\067\030\110\031\106\032\100\034" +
    "\312\040\105\041\075\045\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\315\001\001\000\002\001" +
    "\001\000\004\035\321\001\001\000\004\006\320\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\053\014\324\001\001\000\002\001\001\000\044" +
    "\003\326\005\107\014\062\021\101\022\076\023\077\024" +
    "\066\025\073\026\060\027\067\030\110\031\106\032\100" +
    "\034\120\040\105\041\075\045\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\005\107\014\062\021\101" +
    "\022\076\023\077\024\066\025\073\026\060\027\067\030" +
    "\110\031\106\032\100\034\333\040\105\041\075\045\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\340\001\001\000\002\001\001\000\004\006" +
    "\356\001\001\000\006\002\343\014\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\346\001\001\000" +
    "\002\001\001\000\004\006\355\001\001\000\002\001\001" +
    "\000\004\035\354\001\001\000\004\035\353\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	System.out.println("\n------------------ P Parser Error List  ------------------");

    }


	private int syntaxErrorCount = 0;
	
	public void parseSuccessReport(boolean isSuccess){
		if(syntaxErrorCount == 0) System.out.println("\n " + "- No syntax errors found.");
		if(LexicalError.getLexicalErrorCount() == 0) System.out.println("\n " + "- No lexical errors found.");
		if(isSuccess){
			System.out.println("\n\n----------------- P Parser Short Summary -----------------\n");
			System.out.println(" " + "Parsing completed successfully with:");
		} else {
			System.out.println("\n\n----------------- P Parser Short Summary -----------------\n");
			System.out.println(" " + "Parser failed to complete successfully with:");
		}
		System.out.println("     " + syntaxErrorCount + " syntax error" +
		 				  (syntaxErrorCount == 1 ? "," : "s,"));
		System.out.println("     " + LexicalError.getLexicalErrorCount() + " lexical error" +
		 				  (LexicalError.getLexicalErrorCount() == 1 ? "." : "s."));
		System.out.println("\n----------------------------------------------------------");
	}
	
	private String createSyntaxErrorDescription(PSymbol error_token){
		int lineNumber = error_token.getLine();
		int columnNumber = PCompiler.getColumn(error_token.getCol()) - 1;
		String lineString = PCompiler.getLine(lineNumber - 1);
		
		String descriptionText = "\n " + "- Syntax error near token \'" + error_token.value + "\'" + " on line " +
								 lineNumber + ", column " + columnNumber + " found:\n\n";
		String descriptionLocation = "     ";
		descriptionLocation += "Line " + lineNumber + ": ";
		int tempLength = descriptionLocation.length();
		descriptionLocation += lineString + "\n";
		// Prints caret
		for(int i = 0; i < columnNumber + tempLength; i++){
			descriptionLocation += " ";
		}
		descriptionLocation += "^\n";
		//
		String descriptionCause = "     Possible cause: ";
		return descriptionText + descriptionLocation + descriptionCause;
	}
	
	public void syntax_error(Symbol cur_token){
		syntaxErrorCount++;
		if(cur_token != null){
			PSymbol error_token = (PSymbol)cur_token;
			report_error(createSyntaxErrorDescription(error_token));
		} else {
			System.out.println("fdgsdfg");
		}
	}	
	
	public void printErrorDescription(String message){
		System.out.println(message);
	}
	
	public void report_error(String message){
		System.out.print(message);
	}
	
	public void unrecovered_syntax_error(Symbol cur_token){
		parseSuccessReport(false);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	// Error messages
	public static final String LPAREN_MISMATCH =  "missing/cannot match \'(\' (open parenthesis).";
	public static final String RPAREN_MISMATCH = "missing/cannot match \')\' (close parenthesis).";
	public static final String RCURL_MISMATCH = "missing/connot match \'}\' (close curly brace).";
	public static final String RBRAC_MISMATCH = "missing/connot match \'}\' (close curly brace).";
	public static final String COLON_MISSING = "missing/cannot recognise \':\' (colon).";
	public static final String SEMI_MISSING = "missing/cannot recognise \';\' (semicolon).";
	public static final String FDEF_NAME_NOT_FOUND = "missing/cannot recognise function name.";
	public static final String TDEF_NAME_NOT_FOUND = "missing/cannot recognise data type name.";
	public static final String RETURN_MISSING = "missing/cannot recognise return statement.";
	public static final String ASSIGNMENT_UNKNOWN = "assignment not recognised.";
	public static final String FUNCTION_CALL_UNKNOWN = "function call not recognised.";
	public static final String CONTROL_FLOW_UNKNOWN = "control flow statement not recognised.";
	public static final String EQ_MISSING = "missing/cannot recognise \'+\' (assignment operator).";
	public static final String ELSE_MISSING = "missing/cannot recognise \'else\' in if statement.";
	public static final String DO_MISSING = "missing/cannot recognise \'do\' in while statement.";
	public static final String UNTIL_MISSING = "missing/cannot recognise \'until\' in repeat statement.";
	public static final String DECL_UNKNOWN = "declaration section not fully recognised.";
	// public static final String IF_UNKNOWN = "if statement not recognised.";
	// public static final String WHILE_UNKNOWN = "while statement not recognised.";
	// public static final String REPEAT_UNKNOWN = "repeat statement not recognised.";
	public static final String COMMA_MISMATCH = "missing/cannot recognise \',\' (comma).";
	public static final String EXPR_UNKNOWN = "expression not recognised.";

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // error_recovery_token ::= SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_recovery_token",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // error_recovery_token ::= LCURL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_recovery_token",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // error_recovery_token ::= RCURL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_recovery_token",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // comma_separated_values_tail ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_separated_values_tail",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // comma_separated_values_tail ::= COMMA expr comma_separated_values_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_separated_values_tail",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // comma_separated_values ::= 
            {
              ExprCSV RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_separated_values",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // comma_separated_values ::= expr comma_separated_values_tail 
            {
              ExprCSV RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_separated_values",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // floating_point_type ::= FLOAT 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float value = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(value, PrimitiveTypes.FLOAT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floating_point_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // integral_type ::= CHAR 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character value = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(value, PrimitiveTypes.CHAR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integral_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // integral_type ::= INT 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(value, PrimitiveTypes.INT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integral_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // number_type ::= floating_point_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("number_type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // number_type ::= integral_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("number_type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // primitive_type ::= BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // primitive_type ::= number_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // tuple ::= LTUPLE comma_separated_values RTUPLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // list ::= LBRAC comma_separated_values error error_recovery_token 
            {
              Object RESULT =null;
		 parser.printErrorDescription(CUP$parser$actions.RBRAC_MISMATCH); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // list ::= LBRAC comma_separated_values RBRAC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sequence_type ::= tuple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sequence_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sequence_type ::= list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sequence_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sequence_type ::= STR 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Literal(value, PrimitiveTypes.STRING); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sequence_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // actual_type ::= sequence_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // actual_type ::= primitive_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // declared_type ::= TYPE 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type(type); System.out.println("declared_type TYPE matched: " + type); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declared_type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // declared_type ::= identifier 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declared_type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr ::= LPAREN expr RPAREN 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= NOT expr 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotExpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= expr CONCAT expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConcatExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= expr NOTIN expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotInExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr ::= expr IN expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr ::= expr GREATEREQ expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterEqExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr ::= expr GREATER expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr ::= expr LESSEQ expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessEqExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr ::= expr LESS expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr ::= expr OR expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr ::= expr AND expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AndExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr ::= expr NOTEQQ expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotEqqExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= expr EQQ expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqqExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= expr POWER expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PowerExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= expr DIVIDE expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DivExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= expr TIMES expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TimesExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= expr MINUS expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MinusExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= expr PLUS expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PlusExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= var 
            {
              ExprNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= actual_type 
            {
              ExprNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // repeat ::= REPEAT block UNTIL LPAREN expr RPAREN error error_recovery_token 
            {
              Object RESULT =null;
		 parser.printErrorDescription(CUP$parser$actions.SEMI_MISSING); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // repeat ::= REPEAT block UNTIL LPAREN expr error error_recovery_token 
            {
              Object RESULT =null;
		 parser.printErrorDescription(CUP$parser$actions.RPAREN_MISMATCH); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // repeat ::= REPEAT block UNTIL error error_recovery_token 
            {
              Object RESULT =null;
		 parser.printErrorDescription(CUP$parser$actions.LPAREN_MISMATCH); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // repeat ::= REPEAT block error error_recovery_token 
            {
              Object RESULT =null;
		 parser.printErrorDescription(CUP$parser$actions.UNTIL_MISSING); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // repeat ::= REPEAT block UNTIL LPAREN expr RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // while ::= WHILE LPAREN expr RPAREN error error_recovery_token 
            {
              Object RESULT =null;
		 parser.printErrorDescription(CUP$parser$actions.DO_MISSING); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // while ::= WHILE LPAREN expr error error_recovery_token 
            {
              Object RESULT =null;
		 parser.printErrorDescription(CUP$parser$actions.RPAREN_MISMATCH); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // while ::= WHILE error error_recovery_token 
            {
              Object RESULT =null;
		 parser.printErrorDescription(CUP$parser$actions.LPAREN_MISMATCH); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // while ::= WHILE LPAREN expr RPAREN DO block 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block r = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileStmt(l, r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // if ::= IF LPAREN expr RPAREN block error error_recovery_token 
            {
              Object RESULT =null;
		 parser.printErrorDescription(CUP$parser$actions.ELSE_MISSING); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // if ::= IF LPAREN expr error error_recovery_token 
            {
              Object RESULT =null;
		 parser.printErrorDescription(CUP$parser$actions.RPAREN_MISMATCH); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // if ::= IF error error_recovery_token 
            {
              Object RESULT =null;
		 parser.printErrorDescription(CUP$parser$actions.LPAREN_MISMATCH); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // if ::= IF LPAREN expr RPAREN block ELSE block 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Block r = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block els = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfStmt(l, r, els); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // control_flow ::= repeat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control_flow",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // control_flow ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control_flow",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // control_flow ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control_flow",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // list_element_call ::= identifier LBRAC expr RBRAC 
            {
              ArrayLiteral RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_element_call",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // data_type_value_call ::= identifier DOT identifier 
            {
              FieldAccess RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type_value_call",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // function_call_for_expr ::= function_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call_for_expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // function_call_for_statement ::= function_call SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call_for_statement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // function_call ::= identifier LPAREN comma_separated_values RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprCSV args = (ExprCSV)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncStmt(id, args); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // call ::= list_element_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // call ::= data_type_value_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // call ::= function_call_for_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // var ::= var DOT call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // var ::= var DOT identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // var ::= call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // var ::= identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // assignment ::= data_type_value_call EQ expr SEMI 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		FieldAccess i = (FieldAccess)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assign(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // assignment ::= list_element_call EQ expr SEMI 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayLiteral i = (ArrayLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assign(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // assignment ::= identifier EQ expr SEMI 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assign(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= control_flow error error_recovery_token 
            {
              Object RESULT =null;
		 parser.printErrorDescription(CUP$parser$actions.CONTROL_FLOW_UNKNOWN); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= function_call_for_statement error error_recovery_token 
            {
              Object RESULT =null;
		 parser.printErrorDescription(CUP$parser$actions.FUNCTION_CALL_UNKNOWN); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= assignment error error_recovery_token 
            {
              Object RESULT =null;
		 parser.printErrorDescription(CUP$parser$actions.ASSIGNMENT_UNKNOWN); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= control_flow statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= function_call_for_statement statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= assignment statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // body ::= variable_decl_in_body_list statement 
            {
              Body RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Body(l, r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // return ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // return ::= RETURN expr SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnStmt(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // return ::= RETURN SEMI 
            {
              Object RESULT =null;
		 RESULT = new ReturnStmt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // block ::= LCURL body return RCURL 
            {
              Block RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Body l = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Block(l, r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comma_separated_params_tail ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_separated_params_tail",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comma_separated_params_tail ::= COMMA identifier COLON declared_type comma_separated_params_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_separated_params_tail",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comma_separated_params ::= 
            {
              ArgList RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_separated_params",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // comma_separated_params ::= identifier COLON declared_type comma_separated_params_tail 
            {
              ArgList RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_separated_params",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // data_type_instantiation ::= identifier COLON identifier EQ comma_separated_values SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type_instantiation",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // variable_decl_in_body ::= data_type_instantiation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_decl_in_body",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // variable_decl_in_body ::= variable_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_decl_in_body",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variable_decl_in_body_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_decl_in_body_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variable_decl_in_body_list ::= variable_decl_in_body_list variable_decl_in_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_decl_in_body_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // data_type_decl ::= TDEF identifier COLON comma_separated_params error error_recovery_token 
            {
              DeclNode RESULT =null;
		 parser.printErrorDescription(CUP$parser$actions.SEMI_MISSING); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type_decl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // data_type_decl ::= TDEF identifier error error_recovery_token 
            {
              DeclNode RESULT =null;
		 parser.printErrorDescription(CUP$parser$actions.COLON_MISSING); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type_decl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // data_type_decl ::= TDEF error error_recovery_token 
            {
              DeclNode RESULT =null;
		 parser.printErrorDescription(CUP$parser$actions.TDEF_NAME_NOT_FOUND); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type_decl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // data_type_decl ::= TDEF identifier COLON comma_separated_params SEMI 
            {
              DeclNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Id l = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArgList r = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DataTypeDecl(l, r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type_decl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // function_decl ::= FDEF identifier LPAREN comma_separated_params RPAREN error error_recovery_token 
            {
              DeclNode RESULT =null;
		 parser.printErrorDescription(CUP$parser$actions.COLON_MISSING); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function_decl ::= FDEF identifier LPAREN comma_separated_params error error_recovery_token 
            {
              DeclNode RESULT =null;
		 parser.printErrorDescription(CUP$parser$actions.RPAREN_MISMATCH); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function_decl ::= FDEF identifier error error_recovery_token 
            {
              DeclNode RESULT =null;
		 parser.printErrorDescription(CUP$parser$actions.LPAREN_MISMATCH); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function_decl ::= FDEF error error_recovery_token 
            {
              DeclNode RESULT =null;
		 parser.printErrorDescription(CUP$parser$actions.FDEF_NAME_NOT_FOUND); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function_decl ::= FDEF identifier LPAREN comma_separated_params RPAREN COLON VOID block 
            {
              DeclNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArgList l = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block r = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FuncDecl(id, l, r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // function_decl ::= FDEF identifier LPAREN comma_separated_params RPAREN COLON TYPE block 
            {
              DeclNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArgList l = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block r = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FuncDecl(id, l, r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // variable_decl ::= identifier COLON declared_type EQ expr error error_recovery_token 
            {
              DeclNode RESULT =null;
		 parser.printErrorDescription(CUP$parser$actions.SEMI_MISSING); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_decl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // variable_decl ::= identifier COLON error error_recovery_token 
            {
              DeclNode RESULT =null;
		 parser.printErrorDescription(CUP$parser$actions.SEMI_MISSING); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_decl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variable_decl ::= identifier COLON declared_type error error_recovery_token 
            {
              DeclNode RESULT =null;
		 parser.printErrorDescription(CUP$parser$actions.SEMI_MISSING); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_decl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variable_decl ::= identifier error error_recovery_token 
            {
              DeclNode RESULT =null;
		 parser.printErrorDescription(CUP$parser$actions.COLON_MISSING); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_decl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variable_decl ::= identifier COLON declared_type EQ expr SEMI 
            {
              DeclNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDeclComplex(new VarDeclSimple(id, type) , e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_decl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // variable_decl ::= identifier COLON declared_type SEMI 
            {
              DeclNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDeclSimple(id, type); System.out.println("variable_decl matched: " + RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_decl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= 
            {
              DeclList RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= declaration data_type_decl 
            {
              DeclList RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclList r = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclNode l = (DeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclList(l, r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= declaration function_decl 
            {
              DeclList RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclList r = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclNode l = (DeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclList(l, r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= declaration variable_decl 
            {
              DeclList RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclList r = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclNode l = (DeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclList(l, r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // identifier ::= ID 
            {
              Id RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Id(id); System.out.println("declared_type ID matched: " + id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // p ::= declaration error error_recovery_token 
            {
              Object RESULT =null;
		 parser.printErrorDescription(CUP$parser$actions.DECL_UNKNOWN); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // p ::= declaration block 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclList l = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block r = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Root(l, r); parser.parseSuccessReport(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= p EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

