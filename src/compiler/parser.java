
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Feb 18 14:54:22 GMT 2012
//----------------------------------------------------

package compiler;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Feb 18 14:54:22 GMT 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\004\000\002\034" +
    "\003\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\002\000\002\013\006\000\002\013\010\000" +
    "\002\013\004\000\002\027\012\000\002\027\012\000\002" +
    "\014\007\000\002\023\004\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\003\000\002\023\005\000\002\023\005\000\002" +
    "\023\003\000\002\023\006\000\002\023\003\000\002\023" +
    "\006\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\006\005\000\002\007\005\000\002" +
    "\010\002\000\002\010\004\000\002\011\002\000\002\011" +
    "\004\000\002\015\002\000\002\015\006\000\002\016\002" +
    "\000\002\016\004\000\002\017\007\000\002\020\006\000" +
    "\002\021\002\000\002\021\003\000\002\033\004\000\002" +
    "\033\004\000\002\033\004\000\002\022\006\000\002\024" +
    "\007\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\003\003\000\002\003\003\000\002\026\010\000" +
    "\002\030\011\000\002\031\011\000\002\032\005\000\002" +
    "\032\004\000\002\035\003\000\002\035\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\014\003\ufffb\031\ufffb\032\ufffb\033\ufffb\042" +
    "\ufffb\001\002\000\004\002\224\001\002\000\014\003\015" +
    "\031\010\032\017\033\013\042\014\001\002\000\026\003" +
    "\ufffd\022\ufffd\023\ufffd\026\ufffd\030\ufffd\031\ufffd\032\ufffd" +
    "\033\ufffd\034\ufffd\042\ufffd\001\002\000\004\002\001\001" +
    "\002\000\004\042\202\001\002\000\026\003\ufffe\022\ufffe" +
    "\023\ufffe\026\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034" +
    "\ufffe\042\ufffe\001\002\000\004\002\uffff\001\002\000\022" +
    "\003\ufffb\022\ufffb\023\ufffb\026\ufffb\031\ufffb\032\ufffb\034" +
    "\ufffb\042\ufffb\001\002\000\004\021\035\001\002\000\004" +
    "\020\034\001\002\000\026\003\ufffc\022\ufffc\023\ufffc\026" +
    "\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\042\ufffc" +
    "\001\002\000\006\042\020\051\022\001\002\000\044\004" +
    "\uffc7\006\uffc7\011\uffc7\012\uffc7\014\uffc7\015\uffc7\017\uffc7" +
    "\020\uffc7\021\uffc7\033\uffc7\035\uffc7\040\uffc7\041\uffc7\045" +
    "\uffc7\047\uffc7\050\uffc7\053\uffc7\001\002\000\004\021\023" +
    "\001\002\000\044\004\uffc6\006\uffc6\011\uffc6\012\uffc6\014" +
    "\uffc6\015\uffc6\017\uffc6\020\uffc6\021\uffc6\033\uffc6\035\uffc6" +
    "\040\uffc6\041\uffc6\045\uffc6\047\uffc6\050\uffc6\053\uffc6\001" +
    "\002\000\006\020\uffd7\042\024\001\002\000\004\021\027" +
    "\001\002\000\004\020\026\001\002\000\026\003\ufff5\022" +
    "\ufff5\023\ufff5\026\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5" +
    "\034\ufff5\042\ufff5\001\002\000\006\042\020\051\022\001" +
    "\002\000\010\004\031\017\uffd5\020\uffd5\001\002\000\010" +
    "\017\uffd7\020\uffd7\042\024\001\002\000\006\017\uffd6\020" +
    "\uffd6\001\002\000\006\017\uffd4\020\uffd4\001\002\000\026" +
    "\003\ufff8\022\ufff8\023\ufff8\026\ufff8\030\ufff8\031\ufff8\032" +
    "\ufff8\033\ufff8\034\ufff8\042\ufff8\001\002\000\006\042\020" +
    "\051\022\001\002\000\006\015\040\020\037\001\002\000" +
    "\026\003\ufffa\022\ufffa\023\ufffa\026\ufffa\030\ufffa\031\ufffa" +
    "\032\ufffa\033\ufffa\034\ufffa\042\ufffa\001\002\000\032\003" +
    "\050\005\057\010\054\016\056\020\uffdb\037\055\042\047" +
    "\043\044\047\043\052\041\054\061\055\042\001\002\000" +
    "\036\004\uffe8\006\uffe8\011\uffe8\012\uffe8\014\uffe8\017\uffe8" +
    "\020\uffe8\035\uffe8\040\uffe8\041\uffe8\045\uffe8\047\uffe8\050" +
    "\uffe8\053\uffe8\001\002\000\014\004\uffde\006\uffde\011\uffde" +
    "\017\uffde\020\uffde\001\002\000\036\004\uffeb\006\uffeb\011" +
    "\uffeb\012\uffeb\014\uffeb\017\uffeb\020\uffeb\035\uffeb\040\uffeb" +
    "\041\uffeb\045\uffeb\047\uffeb\050\uffeb\053\uffeb\001\002\000" +
    "\014\004\uffe0\006\uffe0\011\uffe0\017\uffe0\020\uffe0\001\002" +
    "\000\036\004\uffe4\006\uffe4\011\uffe4\012\uffe4\014\uffe4\017" +
    "\uffe4\020\uffe4\035\uffe4\040\uffe4\041\uffe4\045\uffe4\047\uffe4" +
    "\050\uffe4\053\uffe4\001\002\000\036\004\uffe1\006\uffe1\011" +
    "\uffe1\012\075\014\070\017\uffe1\020\uffe1\035\066\040\065" +
    "\041\073\045\067\047\071\050\076\053\072\001\002\000" +
    "\044\004\uffc0\006\uffc0\007\121\010\117\011\uffc0\012\uffc0" +
    "\014\uffc0\016\120\017\uffc0\020\uffc0\035\uffc0\040\uffc0\041" +
    "\uffc0\045\uffc0\047\uffc0\050\uffc0\053\uffc0\001\002\000\036" +
    "\004\uffe2\006\uffe2\011\uffe2\012\uffe2\014\uffe2\017\uffe2\020" +
    "\uffe2\035\uffe2\040\uffe2\041\uffe2\045\uffe2\047\uffe2\050\uffe2" +
    "\053\uffe2\001\002\000\004\020\116\001\002\000\036\004" +
    "\uffe3\006\uffe3\011\uffe3\012\uffe3\014\uffe3\017\uffe3\020\uffe3" +
    "\035\uffe3\040\uffe3\041\uffe3\045\uffe3\047\uffe3\050\uffe3\053" +
    "\uffe3\001\002\000\014\004\114\006\uffd9\011\uffd9\017\uffd9" +
    "\020\uffd9\001\002\000\032\003\050\005\057\010\054\011" +
    "\uffdb\016\056\037\055\042\047\043\044\047\043\052\041" +
    "\054\061\055\042\001\002\000\022\003\050\005\057\010" +
    "\054\016\056\037\055\042\047\047\043\052\041\001\002" +
    "\000\022\003\050\005\057\010\054\016\056\037\055\042" +
    "\047\047\043\052\041\001\002\000\032\003\050\005\057" +
    "\006\uffdb\010\054\016\056\037\055\042\047\043\044\047" +
    "\043\052\041\054\061\055\042\001\002\000\036\004\uffe6" +
    "\006\uffe6\011\uffe6\012\uffe6\014\uffe6\017\uffe6\020\uffe6\035" +
    "\uffe6\040\uffe6\041\uffe6\045\uffe6\047\uffe6\050\uffe6\053\uffe6" +
    "\001\002\000\014\004\uffdf\006\uffdf\011\uffdf\017\uffdf\020" +
    "\uffdf\001\002\000\004\006\063\001\002\000\036\004\uffdc" +
    "\006\uffdc\011\uffdc\012\uffdc\014\uffdc\017\uffdc\020\uffdc\035" +
    "\uffdc\040\uffdc\041\uffdc\045\uffdc\047\uffdc\050\uffdc\053\uffdc" +
    "\001\002\000\026\012\075\014\070\017\074\035\066\040" +
    "\065\041\073\045\067\047\071\050\076\053\072\001\002" +
    "\000\022\003\050\005\057\010\054\016\056\037\055\042" +
    "\047\047\043\052\041\001\002\000\022\003\050\005\057" +
    "\010\054\016\056\037\055\042\047\047\043\052\041\001" +
    "\002\000\022\003\050\005\057\010\054\016\056\037\055" +
    "\042\047\047\043\052\041\001\002\000\022\003\050\005" +
    "\057\010\054\016\056\037\055\042\047\047\043\052\041" +
    "\001\002\000\022\003\050\005\057\010\054\016\056\037" +
    "\055\042\047\047\043\052\041\001\002\000\022\003\050" +
    "\005\057\010\054\016\056\037\055\042\047\047\043\052" +
    "\041\001\002\000\022\003\050\005\057\010\054\016\056" +
    "\037\055\042\047\047\043\052\041\001\002\000\036\004" +
    "\ufff3\006\ufff3\011\ufff3\012\ufff3\014\ufff3\017\ufff3\020\ufff3" +
    "\035\ufff3\040\ufff3\041\ufff3\045\ufff3\047\ufff3\050\ufff3\053" +
    "\ufff3\001\002\000\022\003\050\005\057\010\054\016\056" +
    "\037\055\042\047\047\043\052\041\001\002\000\022\003" +
    "\050\005\057\010\054\016\056\037\055\042\047\047\043" +
    "\052\041\001\002\000\036\004\uffe9\006\uffe9\011\uffe9\012" +
    "\uffe9\014\uffe9\017\uffe9\020\uffe9\035\066\040\uffe9\041\uffe9" +
    "\045\uffe9\047\uffe9\050\uffe9\053\uffe9\001\002\000\036\004" +
    "\ufff0\006\ufff0\011\ufff0\012\ufff0\014\ufff0\017\ufff0\020\ufff0" +
    "\035\066\040\ufff0\041\ufff0\045\ufff0\047\ufff0\050\ufff0\053" +
    "\ufff0\001\002\000\036\004\uffee\006\uffee\011\uffee\012\uffee" +
    "\014\uffee\017\uffee\020\uffee\035\066\040\uffee\041\uffee\045" +
    "\uffee\047\uffee\050\uffee\053\uffee\001\002\000\036\004\ufff2" +
    "\006\ufff2\011\ufff2\012\075\014\070\017\ufff2\020\ufff2\035" +
    "\066\040\ufff2\041\073\045\067\047\071\050\076\053\ufff2" +
    "\001\002\000\036\004\uffea\006\uffea\011\uffea\012\uffea\014" +
    "\uffea\017\uffea\020\uffea\035\066\040\uffea\041\uffea\045\uffea" +
    "\047\uffea\050\uffea\053\uffea\001\002\000\034\004\ufff1\006" +
    "\ufff1\011\ufff1\012\075\017\ufff1\020\ufff1\035\066\040\ufff1" +
    "\041\073\045\ufff1\047\071\050\076\053\ufff1\001\002\000" +
    "\036\004\uffec\006\uffec\011\uffec\012\075\014\070\017\uffec" +
    "\020\uffec\035\066\040\uffec\041\073\045\uffec\047\071\050" +
    "\076\053\uffec\001\002\000\036\004\uffed\006\uffed\011\uffed" +
    "\012\uffed\014\uffed\017\uffed\020\uffed\035\066\040\uffed\041" +
    "\uffed\045\uffed\047\uffed\050\uffed\053\uffed\001\002\000\036" +
    "\004\uffef\006\uffef\011\uffef\012\075\014\070\017\uffef\020" +
    "\uffef\035\066\040\uffef\041\073\045\067\047\071\050\076" +
    "\053\uffef\001\002\000\036\004\ufff4\006\ufff4\011\ufff4\012" +
    "\ufff4\014\ufff4\017\ufff4\020\ufff4\035\066\040\ufff4\041\ufff4" +
    "\045\ufff4\047\ufff4\050\ufff4\053\ufff4\001\002\000\004\011" +
    "\112\001\002\000\036\004\uffdd\006\uffdd\011\uffdd\012\uffdd" +
    "\014\uffdd\017\uffdd\020\uffdd\035\uffdd\040\uffdd\041\uffdd\045" +
    "\uffdd\047\uffdd\050\uffdd\053\uffdd\001\002\000\012\006\uffda" +
    "\011\uffda\017\uffda\020\uffda\001\002\000\040\003\050\005" +
    "\057\006\uffdb\010\054\011\uffdb\016\056\017\uffdb\020\uffdb" +
    "\037\055\042\047\043\044\047\043\052\041\054\061\055" +
    "\042\001\002\000\012\006\uffd8\011\uffd8\017\uffd8\020\uffd8" +
    "\001\002\000\026\003\ufff9\022\ufff9\023\ufff9\026\ufff9\030" +
    "\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\042\ufff9\001\002" +
    "\000\022\003\050\005\057\010\054\016\056\037\055\042" +
    "\047\047\043\052\041\001\002\000\032\003\050\005\057" +
    "\010\054\016\056\017\uffdb\037\055\042\047\043\044\047" +
    "\043\052\041\054\061\055\042\001\002\000\006\042\020" +
    "\051\022\001\002\000\040\004\uffbf\006\uffbf\011\uffbf\012" +
    "\uffbf\014\uffbf\015\uffbf\017\uffbf\020\uffbf\035\uffbf\040\uffbf" +
    "\041\uffbf\045\uffbf\047\uffbf\050\uffbf\053\uffbf\001\002\000" +
    "\004\017\124\001\002\000\036\004\uffe7\006\uffe7\011\uffe7" +
    "\012\uffe7\014\uffe7\017\uffe7\020\uffe7\035\uffe7\040\uffe7\041" +
    "\uffe7\045\uffe7\047\uffe7\050\uffe7\053\uffe7\001\002\000\026" +
    "\011\126\012\075\014\070\035\066\040\065\041\073\045" +
    "\067\047\071\050\076\053\072\001\002\000\036\004\uffe5" +
    "\006\uffe5\011\uffe5\012\uffe5\014\uffe5\017\uffe5\020\uffe5\035" +
    "\uffe5\040\uffe5\041\uffe5\045\uffe5\047\uffe5\050\uffe5\053\uffe5" +
    "\001\002\000\022\003\015\022\133\023\131\026\144\031" +
    "\010\032\017\034\uffd1\042\134\001\002\000\016\022\133" +
    "\023\131\026\144\030\uffd1\034\uffd1\042\160\001\002\000" +
    "\004\016\174\001\002\000\006\030\uffd0\034\uffd0\001\002" +
    "\000\004\016\166\001\002\000\012\007\121\015\uffc0\016" +
    "\161\021\035\001\002\000\016\022\uffc8\023\uffc8\026\uffc8" +
    "\030\uffc8\034\uffc8\042\uffc8\001\002\000\016\022\uffc9\023" +
    "\uffc9\026\uffc9\030\uffc9\034\uffc9\042\uffc9\001\002\000\016" +
    "\022\uffca\023\uffca\026\uffca\030\uffca\034\uffca\042\uffca\001" +
    "\002\000\016\022\133\023\131\026\144\030\uffd1\034\uffd1" +
    "\042\160\001\002\000\016\022\133\023\131\026\144\030" +
    "\uffd1\034\uffd1\042\160\001\002\000\004\034\156\001\002" +
    "\000\004\015\153\001\002\000\004\033\013\001\002\000" +
    "\004\027\146\001\002\000\004\016\147\001\002\000\022" +
    "\003\050\005\057\010\054\016\056\037\055\042\047\047" +
    "\043\052\041\001\002\000\026\012\075\014\070\017\151" +
    "\035\066\040\065\041\073\045\067\047\071\050\076\053" +
    "\072\001\002\000\004\020\152\001\002\000\016\022\uffc3" +
    "\023\uffc3\026\uffc3\030\uffc3\034\uffc3\042\uffc3\001\002\000" +
    "\030\003\050\005\057\010\054\016\056\037\055\042\047" +
    "\043\044\047\043\052\041\054\061\055\042\001\002\000" +
    "\004\020\155\001\002\000\016\022\uffcc\023\uffcc\026\uffcc" +
    "\030\uffcc\034\uffcc\042\uffcc\001\002\000\034\002\uffd2\003" +
    "\uffd2\022\uffd2\023\uffd2\024\uffd2\026\uffd2\027\uffd2\030\uffd2" +
    "\031\uffd2\032\uffd2\033\uffd2\034\uffd2\042\uffd2\001\002\000" +
    "\006\030\uffce\034\uffce\001\002\000\010\007\121\015\uffc0" +
    "\016\161\001\002\000\032\003\050\005\057\010\054\016" +
    "\056\017\uffdb\037\055\042\047\043\044\047\043\052\041" +
    "\054\061\055\042\001\002\000\004\017\163\001\002\000" +
    "\004\020\164\001\002\000\016\022\uffcb\023\uffcb\026\uffcb" +
    "\030\uffcb\034\uffcb\042\uffcb\001\002\000\006\030\uffcf\034" +
    "\uffcf\001\002\000\022\003\050\005\057\010\054\016\056" +
    "\037\055\042\047\047\043\052\041\001\002\000\026\012" +
    "\075\014\070\017\170\035\066\040\065\041\073\045\067" +
    "\047\071\050\076\053\072\001\002\000\004\033\013\001" +
    "\002\000\004\024\172\001\002\000\004\033\013\001\002" +
    "\000\016\022\uffc4\023\uffc4\026\uffc4\030\uffc4\034\uffc4\042" +
    "\uffc4\001\002\000\022\003\050\005\057\010\054\016\056" +
    "\037\055\042\047\047\043\052\041\001\002\000\026\012" +
    "\075\014\070\017\176\035\066\040\065\041\073\045\067" +
    "\047\071\050\076\053\072\001\002\000\004\025\177\001" +
    "\002\000\004\033\013\001\002\000\016\022\uffc5\023\uffc5" +
    "\026\uffc5\030\uffc5\034\uffc5\042\uffc5\001\002\000\006\030" +
    "\uffcd\034\uffcd\001\002\000\004\016\203\001\002\000\006" +
    "\017\uffd7\042\024\001\002\000\004\017\205\001\002\000" +
    "\004\021\206\001\002\000\010\036\210\042\020\051\022" +
    "\001\002\000\004\033\212\001\002\000\004\033\013\001" +
    "\002\000\026\003\ufff6\022\ufff6\023\ufff6\026\ufff6\030\ufff6" +
    "\031\ufff6\032\ufff6\033\ufff6\034\ufff6\042\ufff6\001\002\000" +
    "\022\003\ufffb\022\ufffb\023\ufffb\026\ufffb\030\ufffb\031\ufffb" +
    "\032\ufffb\042\ufffb\001\002\000\026\003\ufff7\022\ufff7\023" +
    "\ufff7\026\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7" +
    "\042\ufff7\001\002\000\022\003\015\022\133\023\131\026" +
    "\144\030\uffd1\031\010\032\017\042\134\001\002\000\004" +
    "\030\216\001\002\000\024\003\050\005\057\010\054\016" +
    "\056\020\221\037\055\042\047\047\043\052\041\001\002" +
    "\000\004\034\220\001\002\000\026\003\uffd3\022\uffd3\023" +
    "\uffd3\026\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3" +
    "\042\uffd3\001\002\000\004\034\uffc1\001\002\000\026\012" +
    "\075\014\070\020\223\035\066\040\065\041\073\045\067" +
    "\047\071\050\076\053\072\001\002\000\004\034\uffc2\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\006\002\003\004\004\001\001\000\002\001" +
    "\001\000\014\013\010\014\015\020\011\027\005\034\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\027\001\001\000\004\016\031\001\001\000\004\015" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\044\007\051\010\050\012\052" +
    "\023\045\035\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\112\001\001" +
    "\000\016\006\044\007\051\010\110\012\052\023\045\035" +
    "\057\001\001\000\012\006\044\007\051\023\107\035\057" +
    "\001\001\000\012\006\044\007\051\023\063\035\057\001" +
    "\001\000\016\006\044\007\051\010\061\012\052\023\045" +
    "\035\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\044\007\051\023\106\035\057\001\001\000\012\006" +
    "\044\007\051\023\105\035\057\001\001\000\012\006\044" +
    "\007\051\023\104\035\057\001\001\000\012\006\044\007" +
    "\051\023\103\035\057\001\001\000\012\006\044\007\051" +
    "\023\102\035\057\001\001\000\012\006\044\007\051\023" +
    "\101\035\057\001\001\000\012\006\044\007\051\023\100" +
    "\035\057\001\001\000\002\001\001\000\012\006\044\007" +
    "\051\023\077\035\057\001\001\000\012\006\044\007\051" +
    "\023\076\035\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\044\007\051\010" +
    "\114\012\052\023\045\035\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\044\007\051\023\124\035" +
    "\057\001\001\000\016\006\044\007\051\010\122\012\052" +
    "\023\045\035\057\001\001\000\004\003\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\013\010\014\015\021" +
    "\141\022\137\024\140\025\127\026\136\027\005\030\135" +
    "\031\134\033\131\035\142\001\001\000\024\021\200\022" +
    "\137\024\140\025\127\026\136\030\135\031\134\033\131" +
    "\035\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\021\164\022\137\024" +
    "\140\025\127\026\136\030\135\031\134\033\131\035\142" +
    "\001\001\000\024\021\156\022\137\024\140\025\127\026" +
    "\136\030\135\031\134\033\131\035\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\044\007\051" +
    "\023\147\035\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\006\044\007\051\012\153" +
    "\023\045\035\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\044\007\051\010\161\012\052\023\045\035" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\044\007\051\023" +
    "\166\035\057\001\001\000\002\001\001\000\004\020\170" +
    "\001\001\000\002\001\001\000\004\020\172\001\001\000" +
    "\002\001\001\000\012\006\044\007\051\023\174\035\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\206\001\001\000\004\017\212" +
    "\001\001\000\004\020\210\001\001\000\002\001\001\000" +
    "\004\004\213\001\001\000\002\001\001\000\032\013\010" +
    "\014\015\021\214\022\137\024\140\025\127\026\136\027" +
    "\005\030\135\031\134\033\131\035\142\001\001\000\004" +
    "\032\216\001\001\000\012\006\044\007\051\023\221\035" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // var ::= ID DOT typeorid 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // var ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // return ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // return ::= RETURN expression SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // repeat ::= REPEAT body UNTIL LPAREN expression RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // if ::= IF LPAREN expression RPAREN body ELSE body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // while ::= WHILE LPAREN expression RPAREN DO body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // typeorid ::= TYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeorid",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // typeorid ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeorid",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // contflow ::= repeat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("contflow",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // contflow ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("contflow",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // contflow ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("contflow",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // fcall ::= ID LPAREN commalist RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fcall",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // assign ::= var ASSIGN literal SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stat2 ::= contflow statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stat2 ::= fcall statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // stat2 ::= assign statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statements ::= stat2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statements ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // body ::= LCURL dec statements RCURL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bodyr ::= LCURL dec statements return RCURL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodyr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // csv2 ::= COMMA csv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("csv2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // csv2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("csv2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // csv ::= ID COLON typeorid csv2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("csv",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // csv ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("csv",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // commalist2 ::= COMMA commalist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("commalist2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // commalist2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("commalist2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // commalist ::= literal commalist2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("commalist",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // commalist ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("commalist",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tuple ::= BEGINTUP commalist ENDTUP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // list ::= LBRACK commalist RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // literal ::= BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // literal ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // literal ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // literal ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= error 
            {
              Object RESULT =null;
		System.err.println("badly formed literal or expression" );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= tuple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= ID LBRACK expression RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= ID LPAREN commalist RPAREN 
            {
              Object RESULT =null;
		//this is a fcall with no semi colon
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= expression COMPOP expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= expression SEQOP expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= SEQOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= expression BOOLOP expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression ::= expression POW expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression ::= expression DIV expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= expression MINUS expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression ::= expression TIMES expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= expression EQQ expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= expression PLUS expression 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= NOT expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // newdadec ::= TDEF typeorid COLON csv SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("newdadec",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // funcdec ::= FDEF ID LPAREN csv RPAREN COLON VOID body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcdec",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funcdec ::= FDEF ID LPAREN csv RPAREN COLON typeorid bodyr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcdec",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // vdec ::= error SEMI 
            {
              Object RESULT =null;
		 System.out.println("bad variable or data type declaration");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vdec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // vdec ::= ID COLON typeorid ASSIGN commalist SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vdec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // vdec ::= ID COLON typeorid SEMI 
            {
              Object RESULT =null;
		 System.out.println("matched variable declaration no instantiation" );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vdec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec ::= dec newdadec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec ::= dec funcdec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec ::= dec vdec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= dec main 
            {
              Object RESULT =null;
		 System.out.println("Success AMIGO ! ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

